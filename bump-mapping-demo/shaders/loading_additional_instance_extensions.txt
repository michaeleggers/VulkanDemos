#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

#define GLM_FORCE_RADIANS
#define GLM_FORCE_DEPTH_ZERO_TO_ONE

#include <iostream>
//#include <assert.h>

#define WIDTH  800
#define HEIGHT 600

#define USE_INSTANCE_EXTENSIONS 0

#define DBG_VULKAN_ASSERT(result, msg) \
 if (result != VK_SUCCESS) { \
   printf("%s (Line: %d)\nPress any key to terminate...\n", msg, __LINE__); \
   getchar(); \
   exit(-1); \
 }

#define make_array(arr, type, count) \
 arr = (type *)malloc(count * sizeof(type));  

#define kill_array(arr) \
 free(arr)

#define array_length(arr) \
 sizeof(arr) / sizeof(arr[0])

#define min(a, b) (a < b ? a : b)
#define max(a, b) (a > b ? a : b)

struct HelloTriangleApplication
{
	GLFWwindow * window;
	VkInstance instance;
	const char * validation_layers[1] = {
		"VK_LAYER_KHRONOS_validation"
		//"VK_LAYER_LUNARG_standard_validation",
		//"VK_LAYER_LUNARG_monitor"
	};

	const char * instance_extensions[1] = {
		//VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME
	};

	const char * device_extensions[1] = {
		VK_KHR_SWAPCHAIN_EXTENSION_NAME,
		//VK_NV_RAY_TRACING_EXTENSION_NAME
	};
	
	// NDEBUG doesnt work. FUCK VS
#ifdef _DEBUG
	int enable_validation_layers = 1;
#else
	int enable_validation_layers = 0;
#endif

	VkPhysicalDevice physical_device = VK_NULL_HANDLE;
	VkDevice device;
	VkQueue graphics_queue;
	VkQueue present_queue;
	VkSurfaceKHR surface;

	VkSwapchainKHR swapchain;
	VkImage * swapchain_images;
	uint32_t swapchain_image_count;
	VkFormat swapchain_image_format;
	VkExtent2D swapchain_extent;
	VkImageView * swapchain_image_views;

	VkRenderPass render_pass;
	VkPipelineLayout pipeline_layout;
	VkPipeline graphics_pipeline;
};

struct QueueFamilyIndicies {
	int has_graphics_family;
	uint32_t graphics_family;
	int has_present_family;
	uint32_t present_family;
};

struct SwapChainSupportDetails {
	VkSurfaceCapabilitiesKHR capabilities;
	VkSurfaceFormatKHR * formats;
	uint32_t format_count;
	VkPresentModeKHR * present_modes;
	uint32_t present_mode_count;
};

void create_instance(HelloTriangleApplication * app);
void pick_physical_device(HelloTriangleApplication * app);
int check_validation_layer_support(char const * requested_layer, char ** available_layers, int available_layer_count);
void create_logical_device(HelloTriangleApplication * app);
QueueFamilyIndicies find_queue_families(VkPhysicalDevice device, VkSurfaceKHR surface);
void create_swapchain(HelloTriangleApplication * app);
void create_image_views(HelloTriangleApplication * app);

void init_window(HelloTriangleApplication * app) {
	glfwInit();
	glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
	glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE);
	app->window = glfwCreateWindow(WIDTH, HEIGHT, "Vulkan", 0, 0);
}

void create_surface(HelloTriangleApplication * app)
{
	VkResult result = glfwCreateWindowSurface(app->instance, app->window, 0, &app->surface);
	DBG_VULKAN_ASSERT(result, "failed to create window surface");
}

void create_instance(HelloTriangleApplication * app)
{
	VkApplicationInfo app_info = {};
	app_info.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
	app_info.pApplicationName = "Hello Triangle";
	app_info.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
	app_info.pEngineName = "No Engine";
	app_info.engineVersion = VK_MAKE_VERSION(1, 0, 0);
	app_info.apiVersion = VK_API_VERSION_1_0;

	VkInstanceCreateInfo create_info = {};
	create_info.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
	create_info.pApplicationInfo = &app_info;

	// Query available extensions. Just print them here. Actual extension loading
	// is being done by glfw below.
	uint32_t extension_count = 0;
	vkEnumerateInstanceExtensionProperties(0, &extension_count, 0);
	VkExtensionProperties * extensions = 0;
	make_array(extensions, VkExtensionProperties, extension_count);
	vkEnumerateInstanceExtensionProperties(0, &extension_count, extensions);
	printf("available extensions (%d):\n", extension_count);
	for (int i = 0; i < extension_count; ++i) {
		printf("%s\n", (extensions + i)->extensionName);
	}
	kill_array(extensions);

	// If debug build check if validation layers defined in struct are available and load them
	uint32_t layer_count = 0;
	vkEnumerateInstanceLayerProperties(&layer_count, 0);
	VkLayerProperties * layers = 0;
	char ** available_layer_names;
	make_array(available_layer_names, char *, layer_count);
	make_array(layers, VkLayerProperties, layer_count);
	vkEnumerateInstanceLayerProperties(&layer_count, layers);
	printf("\navailable layers (%d):\n", layer_count);
	for (int i = 0; i < layer_count; ++i) {
		available_layer_names[i] = (layers + i)->layerName;
		printf("%s\n", (layers + i)->layerName);
	}

	int layer_ok = 0;
	if (app->enable_validation_layers) {
		for (int i = 0; i < array_length(app->validation_layers); ++i) {
			layer_ok = check_validation_layer_support(app->validation_layers[i], available_layer_names, layer_count);
			if (!layer_ok) {
				printf("validation layer not available: %s\n", app->validation_layers[i]);
				DBG_VULKAN_ASSERT(VK_ERROR_LAYER_NOT_PRESENT, "requested validation layer not present");
			}
		}
	}
	if (layer_ok) {
		create_info.enabledLayerCount = array_length(app->validation_layers);
		create_info.ppEnabledLayerNames = app->validation_layers;
	}

	uint32_t glfw_extension_count = 0;
	char const ** glfw_extensions;
	glfw_extensions = glfwGetRequiredInstanceExtensions(&glfw_extension_count);

#if USE_INSTANCE_EXTENSIONS
	char ** all_extensions = (char**)malloc( (glfw_extension_count + array_length(app->instance_extensions) ) * sizeof(char*));
	char * extension_entry = *all_extensions;
	for (int i = 0; i < glfw_extension_count + array_length(app->instance_extensions); ++i) {
		all_extensions[i] = (char*)malloc(256 * sizeof(char));
		memset(all_extensions[i], '\0', 256);
	}
	int i = 0;
	for ( ; i < glfw_extension_count; ++i) {
		strcpy_s(all_extensions[i], 256, glfw_extensions[i]);
	}
	for (int j=0 ; j < array_length(app->instance_extensions); ++i, ++j) {
		strcpy_s(all_extensions[i], 256, app->instance_extensions[j]);
	}
#endif
	create_info.enabledExtensionCount = glfw_extension_count;// +array_length(app->instance_extensions);
	create_info.ppEnabledExtensionNames = glfw_extensions;
	VkResult result = vkCreateInstance(&create_info, 0, &app->instance);
	DBG_VULKAN_ASSERT(result, "failed to create VkInstance");
	kill_array(layers);
	kill_array(available_layer_names);
}

int check_validation_layer_support(char const * requested_layer, char ** available_layers, int available_layer_count)
{
	char ** current_layer = available_layers;
	int found = 0;
	for (int i = 0; i < available_layer_count;  ++i) {
		if (!strcmp(*current_layer, requested_layer)) {
			found = 1;
			break;
		}
		current_layer++;
	}
	return found;
}

SwapChainSupportDetails query_swapchain_support(HelloTriangleApplication * app, VkPhysicalDevice device)
{
	SwapChainSupportDetails details;
	vkGetPhysicalDeviceSurfaceCapabilitiesKHR(device, app->surface, &details.capabilities);
	
	uint32_t format_count;
	vkGetPhysicalDeviceSurfaceFormatsKHR(device, app->surface, &format_count, 0);
	make_array(details.formats, VkSurfaceFormatKHR, format_count);
	details.format_count = format_count;
	vkGetPhysicalDeviceSurfaceFormatsKHR(device, app->surface, &format_count, details.formats);

	uint32_t present_mode_count;
	vkGetPhysicalDeviceSurfacePresentModesKHR(device, app->surface, &present_mode_count, 0);
	make_array(details.present_modes, VkPresentModeKHR, present_mode_count);
	details.present_mode_count = present_mode_count;
	vkGetPhysicalDeviceSurfacePresentModesKHR(device, app->surface, &present_mode_count, details.present_modes);
	
	return details;
}

VkSurfaceFormatKHR choose_swapchain_surface_format(VkSurfaceFormatKHR * available_formats, uint32_t format_count)
{
	VkSurfaceFormatKHR * available_format = available_formats;
	for (int i = 0; i < format_count; ++i) {
		if (available_format->format == VK_FORMAT_B8G8R8A8_UNORM &&
			available_format->colorSpace == VK_COLOR_SPACE_SRGB_NONLINEAR_KHR) {
			return *available_format;
		}
		available_format++;
	}
	return available_formats[0];
}

VkPresentModeKHR choose_swapchain_present_mode(VkPresentModeKHR * available_present_modes, uint32_t present_mode_count)
{
	VkPresentModeKHR * available_present_mode = available_present_modes;
	for (int i = 0; i < present_mode_count; ++i) {
		if (*available_present_mode == VK_PRESENT_MODE_MAILBOX_KHR) {
			return *available_present_mode;
		}
		available_present_mode++;
	}
	return VK_PRESENT_MODE_FIFO_KHR; // only this mode is guaranteed to exist.
}

VkExtent2D choose_swap_extent(VkSurfaceCapabilitiesKHR * capabilities)
{
	if (capabilities->currentExtent.width != UINT32_MAX) {
		return capabilities->currentExtent;
	}
	else {
		VkExtent2D actual_extent = { WIDTH, HEIGHT };
		actual_extent.width  = max(capabilities->minImageExtent.width, min(capabilities->maxImageExtent.width, actual_extent.width));
		actual_extent.height = max(capabilities->minImageExtent.height, min(capabilities->maxImageExtent.height, actual_extent.height));
		return actual_extent;
	}
}

void create_swapchain(HelloTriangleApplication * app)
{
	SwapChainSupportDetails swap_chain_support = query_swapchain_support(app, app->physical_device);

	VkSurfaceFormatKHR surface_format = choose_swapchain_surface_format(swap_chain_support.formats, swap_chain_support.format_count);
	VkPresentModeKHR present_mode = choose_swapchain_present_mode(swap_chain_support.present_modes, swap_chain_support.present_mode_count);
	VkExtent2D extent = choose_swap_extent(&swap_chain_support.capabilities);

	uint32_t image_count = swap_chain_support.capabilities.minImageCount + 1;
	if (swap_chain_support.capabilities.maxImageCount > 0 &&
		image_count > swap_chain_support.capabilities.maxImageArrayLayers) {
		image_count = swap_chain_support.capabilities.maxImageCount;
	}

	VkSwapchainCreateInfoKHR create_info = {};
	create_info.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
	create_info.surface = app->surface;
	create_info.minImageCount = image_count;
	create_info.imageFormat = surface_format.format;
	create_info.imageColorSpace = surface_format.colorSpace;
	create_info.imageExtent = extent;
	create_info.imageArrayLayers = 1;
	create_info.imageUsage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;

	QueueFamilyIndicies indicies = find_queue_families(app->physical_device, app->surface);
	uint32_t queue_family_indicies[] = { indicies.graphics_family, indicies.present_family };
	if (indicies.graphics_family != indicies.present_family) {
		create_info.imageSharingMode = VK_SHARING_MODE_CONCURRENT;
		create_info.queueFamilyIndexCount = 2;
		create_info.pQueueFamilyIndices = queue_family_indicies;
	}
	else {
		create_info.imageSharingMode = VK_SHARING_MODE_EXCLUSIVE;
		create_info.queueFamilyIndexCount = 0;
		create_info.pQueueFamilyIndices = 0;
	}

	create_info.preTransform = swap_chain_support.capabilities.currentTransform;
	create_info.compositeAlpha = VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;
	create_info.presentMode = present_mode;
	create_info.clipped = VK_TRUE;
	create_info.oldSwapchain = VK_NULL_HANDLE;

	VkResult result = vkCreateSwapchainKHR(app->device, &create_info, 0, &app->swapchain);
	DBG_VULKAN_ASSERT(result, "failed to create swapchain!");

	vkGetSwapchainImagesKHR(app->device, app->swapchain, &image_count, 0);
	app->swapchain_image_count = image_count;
	make_array(app->swapchain_images, VkImage, image_count);
	vkGetSwapchainImagesKHR(app->device, app->swapchain, &image_count, app->swapchain_images);

	app->swapchain_image_format = surface_format.format;
	app->swapchain_extent = extent;
}

void create_image_views(HelloTriangleApplication * app)
{
	make_array(app->swapchain_image_views, VkImageView, app->swapchain_image_count);

	for (int i = 0; i < app->swapchain_image_count; ++i) {
		VkImageViewCreateInfo create_info = {};
		create_info.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
		create_info.image = app->swapchain_images[i];
		create_info.viewType = VK_IMAGE_VIEW_TYPE_2D;
		create_info.format = app->swapchain_image_format;
		create_info.components.r = VK_COMPONENT_SWIZZLE_IDENTITY;
		create_info.components.g = VK_COMPONENT_SWIZZLE_IDENTITY;
		create_info.components.b = VK_COMPONENT_SWIZZLE_IDENTITY;
		create_info.components.a = VK_COMPONENT_SWIZZLE_IDENTITY;
		create_info.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
		create_info.subresourceRange.baseMipLevel = 0;
		create_info.subresourceRange.levelCount = 1;
		create_info.subresourceRange.baseArrayLayer = 0;
		create_info.subresourceRange.layerCount = 1;
		VkResult result = vkCreateImageView(app->device, &create_info, 0, &app->swapchain_image_views[i] );
		DBG_VULKAN_ASSERT(result, "failed to create image view!");
	}
}

int rate_device(VkPhysicalDevice device)
{
	VkPhysicalDeviceProperties device_properties;
	vkGetPhysicalDeviceProperties(device, &device_properties);

	switch (device_properties.deviceType)
	{
	case VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU:
	{
		return 1000;
	} break;

	case VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU:
	{
		return 500;
	} break;

	default: return 0;
	}
}

int check_device_extension_support(HelloTriangleApplication * app, VkPhysicalDevice device)
{
	printf("\nquery device extensions:\n");
	uint32_t extension_count = 0;
	vkEnumerateDeviceExtensionProperties(device, 0, &extension_count, 0);
	VkExtensionProperties * available_extensions = 0;
	make_array(available_extensions, VkExtensionProperties, extension_count);
	vkEnumerateDeviceExtensionProperties(device, 0, &extension_count, available_extensions);
	int extensions_found = 0;
	for (int i = 0; i < array_length(app->device_extensions); ++i) {
		for (int k = 0; k < extension_count; ++k) {
			if (!strcmp(app->device_extensions[i], available_extensions[k].extensionName)) {
				printf("device extension: %s found!\n", app->device_extensions[i]);
				extensions_found++;
				goto gt_next_extension;
			}
			else {
				printf("failed to load device extension: %s\n", app->device_extensions[i]);
				DBG_VULKAN_ASSERT(VK_ERROR_EXTENSION_NOT_PRESENT, app->device_extensions[i]);
			}
		}
	gt_next_extension:;
	}
	kill_array(available_extensions);
	return array_length(app->device_extensions) == extensions_found;
}

int is_device_suitable(HelloTriangleApplication * app, VkPhysicalDevice device)
{
	VkPhysicalDeviceProperties device_properties;
	vkGetPhysicalDeviceProperties(device, &device_properties);
	VkPhysicalDeviceFeatures device_features;
	vkGetPhysicalDeviceFeatures(device, &device_features);
	SwapChainSupportDetails swapchain_support = query_swapchain_support(app, device);
	int swapchain_adequate = 1;
	if (!swapchain_support.formats || !swapchain_support.present_modes) {
		swapchain_adequate = 0;
	}
	// NOTE: only test for swapchain support after the extension support has been checked!
	return rate_device(device) && check_device_extension_support(app, device) && swapchain_adequate;
}

QueueFamilyIndicies find_queue_families(VkPhysicalDevice device, VkSurfaceKHR surface)
{
	// Just look for a queue family that can do graphics for now

	QueueFamilyIndicies indicies;
	uint32_t queue_family_count = 0;
	vkGetPhysicalDeviceQueueFamilyProperties(device, &queue_family_count, 0);
	VkQueueFamilyProperties * queue_families;
	make_array(queue_families, VkQueueFamilyProperties, queue_family_count);
	vkGetPhysicalDeviceQueueFamilyProperties(device, &queue_family_count, queue_families);
	indicies.has_graphics_family = 0;
	for (int i = 0; i < queue_family_count; ++i) {
		if (queue_families[i].queueFlags & VK_QUEUE_GRAPHICS_BIT) {
			indicies.graphics_family = i;
			indicies.has_graphics_family = 1;
			break;
		}
	}
	for (int i = 0; i < queue_family_count; ++i) {
		VkBool32 present_support = false;
		vkGetPhysicalDeviceSurfaceSupportKHR(device, i, surface, &present_support);
		if (present_support) {
			indicies.has_present_family = 1;
			indicies.present_family = i;
			break;
		}
	}
	return indicies;
}

void pick_physical_device(HelloTriangleApplication * app)
{
	uint32_t device_count = 0;
	vkEnumeratePhysicalDevices(app->instance, &device_count, 0);
	if (!device_count) {
		printf("No GPU with Vulkan support found\n");
		exit(-1);
	}
	VkPhysicalDevice * physical_devices = 0;
	make_array(physical_devices, VkPhysicalDevice, device_count);
	vkEnumeratePhysicalDevices(app->instance, &device_count, physical_devices);
	int current_best_device = 0;
	for (int i = 0; i < device_count; ++i) {
		int current_device_rating = is_device_suitable(app, physical_devices[i]);
		QueueFamilyIndicies indicies = find_queue_families(physical_devices[i], app->surface);
		if (indicies.has_graphics_family && indicies.has_present_family) {
			if (current_device_rating > current_best_device) {
				app->physical_device = physical_devices[i];
				current_best_device = current_device_rating;
			}
		}
	}
	if (app->physical_device == VK_NULL_HANDLE) {
		printf("failed to find suitable GPU\n");
		exit(-1);
	}
}

void create_logical_device(HelloTriangleApplication * app)
{
	QueueFamilyIndicies indicies = find_queue_families(app->physical_device, app->surface);
	uint32_t unique_queue_families[2] = { indicies.graphics_family, indicies.present_family };
	VkDeviceQueueCreateInfo * queue_create_infos = 0;
	uint32_t info_count = 0;
	if (indicies.graphics_family != indicies.present_family) {
		make_array(queue_create_infos, VkDeviceQueueCreateInfo, 2);
		info_count = 2;
	}
	else {
		make_array(queue_create_infos, VkDeviceQueueCreateInfo, 1);
		info_count = 1;
	}
	float queue_prio = 1.f;
	for (int i = 0; i < info_count; ++i) {
		queue_create_infos[i] = {};
		queue_create_infos[i].sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
		queue_create_infos[i].queueFamilyIndex = unique_queue_families[i];
		queue_create_infos[i].queueCount = 1;
		queue_create_infos[i].pQueuePriorities = &queue_prio;
	}
	
	VkPhysicalDeviceFeatures device_features = {};
	VkDeviceCreateInfo create_info = {};
	create_info.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
	create_info.pQueueCreateInfos = queue_create_infos;
	create_info.queueCreateInfoCount = info_count;
	create_info.pEnabledFeatures = &device_features;
	create_info.enabledExtensionCount = array_length(app->device_extensions);
	create_info.ppEnabledExtensionNames = app->device_extensions;
	// device specific validation layers are deprecated.
	// just specify for compatib. reasons:
	if (app->enable_validation_layers) {
		create_info.enabledLayerCount = array_length(app->validation_layers);
		create_info.ppEnabledLayerNames = app->validation_layers;
	}
	else {
		create_info.enabledLayerCount = 0;
	}
	
	VkResult result = vkCreateDevice(app->physical_device, &create_info, 0, &app->device);
	DBG_VULKAN_ASSERT(result, "failed to create logical device");
	 
 	vkGetDeviceQueue(app->device, indicies.graphics_family, 0, &app->graphics_queue);
	vkGetDeviceQueue(app->device, indicies.present_family, 0, &app->present_queue);
	kill_array(queue_create_infos);
}

void read_file_binary(char const * filename, char ** out_buffer, int * out_size)
{
	FILE * file = 0;
	fopen_s(&file, filename, "rb");
	fseek(file, 0L, SEEK_END);
	*out_size = ftell(file);
	fseek(file, 0L, SEEK_SET);
	*out_buffer = (char*)malloc(*out_size);
	fread(*out_buffer, sizeof(char), *out_size, file);
	fclose(file);
}

VkShaderModule create_shader_module(HelloTriangleApplication * app, char * shader_byte_code, int size)
{
	VkShaderModuleCreateInfo create_info = {};
	create_info.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
	create_info.codeSize = size;
	create_info.pCode = (uint32_t*)shader_byte_code;
	VkShaderModule shader_module;
	VkResult result = vkCreateShaderModule(app->device, &create_info, 0, &shader_module);
	DBG_VULKAN_ASSERT(result, "failed to create shader module!");
	return shader_module;
}

void create_render_pass(HelloTriangleApplication * app)
{
	VkAttachmentDescription color_attachment = {};
	color_attachment.format = app->swapchain_image_format;
	color_attachment.samples = VK_SAMPLE_COUNT_1_BIT;
	color_attachment.loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR;
	color_attachment.storeOp = VK_ATTACHMENT_STORE_OP_STORE;
	color_attachment.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE;
	color_attachment.stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE;
	color_attachment.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED;
	color_attachment.finalLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;

	VkAttachmentReference color_attachment_ref = {};
	color_attachment_ref.attachment = 0;
	color_attachment_ref.layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;

	VkSubpassDescription subpass = {};
	subpass.pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS;
	subpass.colorAttachmentCount = 1;
	subpass.pColorAttachments = &color_attachment_ref;

	VkRenderPassCreateInfo render_pass_info = {};
	render_pass_info.sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
	render_pass_info.attachmentCount = 1;
	render_pass_info.pAttachments = &color_attachment;
	render_pass_info.subpassCount = 1;
	render_pass_info.pSubpasses = &subpass;
	VkResult result = vkCreateRenderPass(app->device, &render_pass_info, 0, &app->render_pass);
	DBG_VULKAN_ASSERT(result, "failed to create render pass!");
}

void create_graphics_pipeline(HelloTriangleApplication * app)
{
	char * vertex_byte_code = 0;
	int vertex_code_size;
	read_file_binary("shaders\\vert.spv", &vertex_byte_code, &vertex_code_size);

	char * fragment_byte_code = 0;
	int fragment_code_size;
	read_file_binary("shaders\\frag.spv", &fragment_byte_code, &fragment_code_size);

	VkShaderModule vert_shader_module = create_shader_module(app, vertex_byte_code, vertex_code_size);
	VkShaderModule frag_shader_module = create_shader_module(app, fragment_byte_code, fragment_code_size);
	free(vertex_byte_code);
	free(fragment_byte_code);

	VkPipelineShaderStageCreateInfo vert_shader_stage_create_info = {};
	vert_shader_stage_create_info.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
	vert_shader_stage_create_info.stage = VK_SHADER_STAGE_VERTEX_BIT;
	vert_shader_stage_create_info.module = vert_shader_module;
	vert_shader_stage_create_info.pName = "main";

	VkPipelineShaderStageCreateInfo frag_shader_stage_create_info = {};
	frag_shader_stage_create_info.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
	frag_shader_stage_create_info.stage = VK_SHADER_STAGE_FRAGMENT_BIT;
	frag_shader_stage_create_info.module = frag_shader_module;
	frag_shader_stage_create_info.pName = "main";

	VkPipelineShaderStageCreateInfo shader_stages_infos[] = { vert_shader_stage_create_info, frag_shader_stage_create_info};

	VkPipelineVertexInputStateCreateInfo vertex_input_info = {};
	vertex_input_info.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
	vertex_input_info.vertexBindingDescriptionCount = 0;
	vertex_input_info.pVertexBindingDescriptions = 0;
	vertex_input_info.vertexAttributeDescriptionCount = 0;
	vertex_input_info.pVertexAttributeDescriptions = 0;

	VkPipelineInputAssemblyStateCreateInfo input_assembly_info = {};
	input_assembly_info.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
	input_assembly_info.topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
	input_assembly_info.primitiveRestartEnable = VK_FALSE;

	VkViewport viewport = {};
	viewport.x = 0.f;
	viewport.y = 0.f;
	viewport.width = app->swapchain_extent.width;
	viewport.height = app->swapchain_extent.height;
	viewport.minDepth = 0.f;
	viewport.maxDepth = 1.f;
	VkRect2D scissor = {};
	scissor.offset = {0,0};
	scissor.extent = app->swapchain_extent;
	VkPipelineViewportStateCreateInfo viewport_state = {};
	viewport_state.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
	viewport_state.pViewports = &viewport;
	viewport_state.viewportCount = 1;
	viewport_state.pScissors = &scissor;
	viewport_state.scissorCount = 1;

	VkPipelineRasterizationStateCreateInfo rasterizer_info = {};
	rasterizer_info.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
	rasterizer_info.frontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE;
	rasterizer_info.cullMode = VK_CULL_MODE_BACK_BIT;
	rasterizer_info.polygonMode = VK_POLYGON_MODE_FILL;
	rasterizer_info.rasterizerDiscardEnable = VK_FALSE;
	rasterizer_info.depthClampEnable = VK_FALSE;
	rasterizer_info.depthBiasEnable = VK_FALSE;
	rasterizer_info.lineWidth = 1.f;

	// COME BACK LATER: Set up depth/stencil testing (we need to create a buffer for that as it is
	// not created with the Swapchain

	VkPipelineColorBlendAttachmentState color_blend_attachment = {};
	color_blend_attachment.colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
	color_blend_attachment.blendEnable = VK_TRUE;
	color_blend_attachment.alphaBlendOp = VK_BLEND_OP_ADD;
	color_blend_attachment.colorBlendOp = VK_BLEND_OP_ADD;
	color_blend_attachment.dstAlphaBlendFactor = VK_BLEND_FACTOR_ZERO;
	color_blend_attachment.srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE;
	color_blend_attachment.dstColorBlendFactor = VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
	color_blend_attachment.srcColorBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA;
	VkPipelineColorBlendStateCreateInfo color_blending_info = {};
	color_blending_info.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
	color_blending_info.logicOpEnable = VK_FALSE; // enabling this will set color_blend_attachment.blendEnable to VK_FALSE!
	// it affects ALL framebuffers

	VkPipelineMultisampleStateCreateInfo ms_info = {};
	ms_info.sType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
	ms_info.sampleShadingEnable = VK_FALSE;

	// dynamic state will force us to provide viewport dimensions and linewidth at drawing-time
	VkDynamicState dynamic_states[] = {
		VK_DYNAMIC_STATE_VIEWPORT,
		VK_DYNAMIC_STATE_LINE_WIDTH
	};
	VkPipelineDynamicStateCreateInfo dynamic_state_info = {};
	dynamic_state_info.sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
	dynamic_state_info.pDynamicStates = dynamic_states;
	dynamic_state_info.dynamicStateCount = sizeof(dynamic_states) / sizeof(*dynamic_states);

	// layout will be specified more later, it is necessary to upload uniforms to the shaders
	VkPipelineLayoutCreateInfo layout_info = {};
	layout_info.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
	VkResult result = vkCreatePipelineLayout(app->device, &layout_info, 0, &app->pipeline_layout);
	DBG_VULKAN_ASSERT(result, "failed to create pipeline layout!");

	VkGraphicsPipelineCreateInfo pipeline_info = {};
	pipeline_info.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
	pipeline_info.stageCount = 2;
	pipeline_info.pStages = shader_stages_infos;
	pipeline_info.pVertexInputState = &vertex_input_info;
	pipeline_info.pInputAssemblyState = &input_assembly_info;
	pipeline_info.pViewportState = &viewport_state;
	pipeline_info.pRasterizationState = &rasterizer_info;
	pipeline_info.pMultisampleState = &ms_info;
	pipeline_info.pDepthStencilState = 0;
	pipeline_info.pColorBlendState = &color_blending_info;
	pipeline_info.pDynamicState = 0;
	pipeline_info.layout = app->pipeline_layout;
	pipeline_info.renderPass = app->render_pass;
	pipeline_info.subpass = 0;

	result = vkCreateGraphicsPipelines(app->device, VK_NULL_HANDLE, 1, &pipeline_info, 0, &app->graphics_pipeline);
	DBG_VULKAN_ASSERT(result, "failed to create graphics pipeline!");

	vkDestroyShaderModule(app->device, vert_shader_module, 0);
	vkDestroyShaderModule(app->device, frag_shader_module, 0);
}

void main_loop(HelloTriangleApplication * app) {
	while (!glfwWindowShouldClose(app->window)) {
		glfwPollEvents();
	}
}

void init_vulkan(HelloTriangleApplication * app)
{
	create_instance(app);
	create_surface(app);
	pick_physical_device(app);
	create_logical_device(app);
	create_swapchain(app);
	create_image_views(app);
	create_render_pass(app);
	create_graphics_pipeline(app);
}

void cleanup(HelloTriangleApplication * app) {
	for (int i = 0; i < app->swapchain_image_count; ++i) {
		vkDestroyImageView(app->device, app->swapchain_image_views[i], 0);
	}
	vkDestroyPipeline(app->device, app->graphics_pipeline, 0);
	vkDestroyPipelineLayout(app->device, app->pipeline_layout, 0);
	vkDestroySwapchainKHR(app->device, app->swapchain, 0);
	vkDestroyDevice(app->device, 0);
	glfwDestroyWindow(app->window);
	vkDestroySurfaceKHR(app->instance, app->surface, 0);
	vkDestroyInstance(app->instance, 0);
	glfwTerminate();
}

int main() {
	HelloTriangleApplication app = {};
	init_window(&app);
	init_vulkan(&app);
	printf("init_vulkan done\n");
	main_loop(&app);
	cleanup(&app);

	return 0;
}

