#version 460
#extension GL_NV_ray_tracing : require

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
    mat4 view;
	mat4 proj;
	mat4 viewInverse;
	mat4 projInverse;
} cam;

layout (binding = 1, set = 1) uniform miscUBO
{
	uint screen_width;
	uint screen_height;
	uint frame;
} misc;

layout(location = 5) rayPayloadNV   vec3 hitValue;
layout(location = 2) rayPayloadNV   vec3 hitValueDebug;

void main() 
{
	/* gl_LaunchIDNV contains the index of the current work item, that is the integer
	for every call to vkCmdTraceRays. So we can say this is the current pixel being worked
	on at the moment.
	*/
	const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);

	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
	vec2 d = inUV * 2.0 - 1.0;
	
	vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;

	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0) ;

	uint rayFlags = gl_RayFlagsOpaqueNV;
	uint cullMask = 0xFF;
	float tmin = 0.001;
	float tmax = 1000.0;

	traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 5);
	//traceNV(topLevelAS, rayFlags, cullMask, 2, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 2);

	imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(hitValue, 0.0));
	//imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(vec3(1,0,0), 0.0));

}
